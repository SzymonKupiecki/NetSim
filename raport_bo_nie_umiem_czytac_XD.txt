//Tutaj jest funkcja która na podstawie fabryki wpycha do os schemat raportowania, nie czyatłe konspektu może się przyda
void save_factory_structure(Factory& factory, std::ostream& os){
    os << '\n';
    os << "== LOADING RAMPS ==" << '\n' << '\n';
    for(auto it = factory.ramp_begin();it != factory.ramp_end();it++){
        os << "LOADING RAMP #" << std::to_string(it->get_id()) << '\n';
        os << "  Delivery interval: " << std::to_string(it->get_delivery_interval()) << '\n';
        os << "  Receivers:" << '\n';
        auto receivers = it->receiver_preferences_.get_preferences();
        for(auto& [receiver, probability]: receivers){
            std::string receiver_str;
            if(receiver->get_receiver_type() == ReceiverType::WORKER){receiver_str = "worker";}
            else{receiver_str = "storehouse";}
            os << "    " << receiver_str << " #" << std::to_string(receiver->get_id()) << '\n';
        }
        os << '\n';
    }
    os << '\n';
    os << "== WORKERS ==" << '\n' << '\n';
    for(auto it = factory.worker_begin(); it != factory.worker_end(); it++){
        os << "WORKER #" << std::to_string(it->get_id()) << '\n';
        os << "  Processing time: " << std::to_string(it->get_processing_duration()) << '\n';
        std::string q_type;
        if(it->get_queue()->get_queue_type() == PackageQueueType::LIFO) {q_type = "LIFO";}
        else{q_type = "FIFO";}
        os << "  Queue type: " << q_type << '\n';
        os << "  Receivers:" << '\n';
        auto receivers = it->receiver_preferences_.get_preferences();
        for(auto& [receiver, probality]: receivers){
            std::string receiver_str;
            if(receiver->get_receiver_type() == ReceiverType::WORKER){receiver_str = "worker";}
            else{receiver_str = "storehouse";}
            os << "    " << receiver_str << " #" << std::to_string(receiver->get_id()) << '\n';
        }
        os << '\n';
    }
    os << '\n';
    os << "== STOREHOUSES ==" << '\n' << '\n';
    for(auto it = factory.storehouse_begin(); it != factory.storehouse_end(); it++){
        os << "STOREHOUSE #" << std::to_string(it->get_id()) << '\n';
    }
}